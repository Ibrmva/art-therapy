{"version":3,"sources":["vectorization.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import sharp from 'sharp';\n// import Potrace from 'potrace';\n\n// const processImage = async (imageBuffer) => {\n//   try {\n//     // Quantize image to 24 colors and get raw pixel data\n//     const quantized = await sharp(imageBuffer)\n//       .png()\n//       .quantize(24, { dither: 0 })\n//       .toBuffer({ resolveWithObject: true });\n\n//     const { data, info } = await sharp(quantized.data)\n//       .ensureAlpha()\n//       .raw()\n//       .toBuffer({ resolveWithObject: true });\n\n//     // Extract unique colors\n//     const colors = new Set();\n//     for (let i = 0; i < data.length; i += info.channels) {\n//       const r = data[i];\n//       const g = data[i + 1];\n//       const b = data[i + 2];\n//       const a = data[i + 3];\n//       colors.add(`rgba(${r},${g},${b},${a})`);\n//     }\n\n//     // Prepare SVG layers\n//     const paths = [];\n//     for (const color of Array.from(colors)) {\n//       const bitmap = new Uint8Array(info.width * info.height);\n      \n//       for (let i = 0; i < data.length; i += info.channels) {\n//         const r = data[i];\n//         const g = data[i + 1];\n//         const b = data[i + 2];\n//         const a = data[i + 3];\n//         const currentColor = `rgba(${r},${g},${b},${a})`;\n//         const idx = Math.floor(i / info.channels);\n//         bitmap[idx] = currentColor === color ? 1 : 0;\n//       }\n\n//       // Trace with Potrace\n//       const svg = await new Promise((resolve, reject) => {\n//         const tracer = new Potrace();\n//         tracer.setParameters({\n//           color: color,\n//           threshold: 128,\n//         });\n//         tracer.loadBitmap(bitmap, info.width, info.height, (err) => {\n//           if (err) reject(err);\n//           resolve(tracer.getPathTag());\n//         });\n//       });\n\n//       paths.push(`<path fill=\"${color}\" d=\"${svg}\"/>`);\n//     }\n\n//     return `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${info.width}\" height=\"${info.height}\" viewBox=\"0 0 ${info.width} ${info.height}\">${paths.join('')}</svg>`;\n//   } catch (error) {\n//     throw error;\n//   }\n// };\n\n// export { processImage };"],"file":"vectorization.dev.js"}