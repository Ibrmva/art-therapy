{"version":3,"sources":["index.js"],"names":["express","require","multer","tf","createCanvas","loadImage","fs","path","app","port","storage","memoryStorage","upload","model","loadModel","loadGraphModel","fromTFHub","console","log","post","single","req","res","file","status","send","error","imageBuffer","buffer","img","canvas","width","height","ctx","getContext","drawImage","tensor","browser","fromPixels","expandDims","executeAsync","segmentation","mask","squeeze","maskImageData","mul","toInt","maskCanvas","maskCtx","maskData","dataSync","putImageData","ImageData","Uint8ClampedArray","from","segmentedImageBuffer","toBuffer","segmentedImageBase64","toString","json","segmentedImage","listen"],"mappings":"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","sourcesContent":["const express = require(\"express\");\nconst multer = require(\"multer\");\nconst tf = require(\"@tensorflow/tfjs-node\");\nconst { createCanvas, loadImage } = require(\"canvas\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\n// Initialize express app\nconst app = express();\nconst port = 4000;\n\n// Set up multer for file uploads\nconst storage = multer.memoryStorage();\nconst upload = multer({ storage: storage });\n\n// Load the pre-trained model (DeepLabV3 for segmentation, you can choose another model)\nlet model;\nasync function loadModel() {\n    model = await tf.loadGraphModel('https://tfhub.dev/tensorflow/deeplabv3/1/default/1', {fromTFHub: true});\n    console.log(\"Model Loaded\");\n}\n\nloadModel(); // Load the model when server starts\n\n// API to segment the image\napp.post(\"/segmentImage\", upload.single(\"image\"), async (req, res) => {\n    if (!req.file) {\n        return res.status(400).send({ error: \"No file uploaded\" });\n    }\n\n    try {\n        const imageBuffer = req.file.buffer;\n        const img = await loadImage(imageBuffer);\n        \n        const canvas = createCanvas(img.width, img.height);\n        const ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n\n        // Convert image to Tensor\n        let tensor = tf.browser.fromPixels(canvas);\n        tensor = tensor.expandDims(0); // Add batch dimension\n\n        // Run segmentation\n        const segmentation = await model.executeAsync(tensor);\n        \n        // Here we are assuming the model returns the segmentation mask in the first element\n        const mask = segmentation[0].squeeze(); // Remove batch dimension\n        \n        // Convert mask tensor to an image\n        const maskImageData = mask.mul(255).toInt();\n        const maskCanvas = createCanvas(img.width, img.height);\n        const maskCtx = maskCanvas.getContext(\"2d\");\n        const maskData = maskImageData.dataSync();\n        \n        maskCtx.putImageData(new ImageData(Uint8ClampedArray.from(maskData), img.width, img.height), 0, 0);\n\n        // Convert segmented image to buffer\n        const segmentedImageBuffer = maskCanvas.toBuffer(\"image/jpeg\");\n\n        // Return the segmented image as base64\n        const segmentedImageBase64 = segmentedImageBuffer.toString(\"base64\");\n        res.json({ segmentedImage: `data:image/jpeg;base64,${segmentedImageBase64}` });\n    } catch (error) {\n        console.error(\"Error during segmentation:\", error);\n        res.status(500).send({ error: \"Error during image segmentation\" });\n    }\n});\n\n// Start the server\napp.listen(port, () => {\n    console.log(`Server is running on http://localhost:${port}`);\n});\n"],"file":"index.dev.js"}