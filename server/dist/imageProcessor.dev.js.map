{"version":3,"sources":["imageProcessor.js"],"names":["require","Image","ndarray","ops","savePixels","split","getPixels","RUN_MODE","PATH_TO_FILE","K","IMAGE","IMAGE_3D_MATRIX","kmeans_main","cluster_points","centers","i","length","Math","floor","red","get","green","blue","push","centersArray","Float32Array","flat","classes","shape","distances","j","sub","pick","undefined","subseq","powseq","addeq","sqrtscaleeq","r","c","minDistance","Number","MAX_VALUE","minClass","l","distance","set","classIndices","cc","classIndicesArray","classReds","classGreens","classBlues","muleq","sumRed","sum","sumGreen","sumBlue","classIndex","kmeans_with_click","points","console","log","x","getRandomInt","y","kmeans_with_random","read_image","Promise","resolve","reject","err","pixels","handle_arguments","args","process","argv","slice","error","exit","parseInt","allowedKValues","includes","save_image","stream","pipe","createWriteStream","on","min","max","random","main","data","imageArray","b"],"mappings":"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","sourcesContent":["\nconst {Image} = require('image-js');\nconst ndarray = require('ndarray');\nconst ops = require('ndarray-ops');\nconst savePixels = require('save-pixels');\nconst split = require('split-array');\nconst getPixels = require('get-pixels');\n\nlet RUN_MODE = -1;\nlet PATH_TO_FILE = \"\";\nlet K = -1;\nlet IMAGE = [];\nlet IMAGE_3D_MATRIX = null;\n\n\nfunction kmeans_main(cluster_points) {\n  // rounding pixel values and getting cluster RGB\n  const centers = [];\n  for (let i = 0; i < cluster_points.length; i++) {\n    cluster_points[i] = [Math.floor(cluster_points[i][0]), Math.floor(cluster_points[i][1])];\n    const red = IMAGE_3D_MATRIX.get(cluster_points[i][0], cluster_points[i][1], 0);\n    const green = IMAGE_3D_MATRIX.get(cluster_points[i][0], cluster_points[i][1], 1);\n    const blue = IMAGE_3D_MATRIX.get(cluster_points[i][0], cluster_points[i][1], 2);\n    centers.push([red, green, blue]);  // Ensure RGB order\n  }\n\n  const centersArray = ndarray(new Float32Array(centers.flat()), [centers.length, 3]);\n\n  // Initializing class and distance arrays\n  const classes = ndarray(new Float32Array(IMAGE_3D_MATRIX.shape[0] * IMAGE_3D_MATRIX.shape[1]), [IMAGE_3D_MATRIX.shape[0], IMAGE_3D_MATRIX.shape[1]]);\n  const distances = ndarray(new Float32Array(IMAGE_3D_MATRIX.shape[0] * IMAGE_3D_MATRIX.shape[1] * K), [IMAGE_3D_MATRIX.shape[0], IMAGE_3D_MATRIX.shape[1], K]);\n\n  for (let i = 0; i < 10; i++) {\n    // finding distances for each center\n    for (let j = 0; j < K; j++) {\n      ops.sub(distances.pick(undefined, undefined, j), centersArray.pick(undefined, undefined, 0), IMAGE_3D_MATRIX.pick(undefined, undefined, 0));\n      ops.subseq(distances.pick(undefined, undefined, j), centersArray.pick(undefined, undefined, 1), IMAGE_3D_MATRIX.pick(undefined, undefined, 1));\n      ops.subseq(distances.pick(undefined, undefined, j), centersArray.pick(undefined, undefined, 2), IMAGE_3D_MATRIX.pick(undefined, undefined, 2));\n      ops.powseq(distances.pick(undefined, undefined, j), distances.pick(undefined, undefined, j), 2);\n      ops.addeq(distances.pick(undefined, undefined, j), distances.pick(undefined, undefined, j));\n      ops.sqrtscaleeq(distances.pick(undefined, undefined, j), distances.pick(undefined, undefined, j), 1);\n    }\n\n    // choosing the minimum distance class for each pixel\n    for (let r = 0; r < classes.shape[0]; r++) {\n      for (let c = 0; c < classes.shape[1]; c++) {\n        let minDistance = Number.MAX_VALUE;\n        let minClass = 0;\n        for (let l = 0; l < K; l++) {\n          const distance = distances.get(r, c, l);\n          if (distance < minDistance) {\n            minDistance = distance;\n            minClass = l;\n          }\n        }\n        classes.set(r, c, minClass);\n      }\n    }\n\n    // rearranging centers\n    for (let c = 0; c < K; c++) {\n      const classIndices = [];\n      for (let r = 0; r < classes.shape[0]; r++) {\n        for (let cc = 0; cc < classes.shape[1]; cc++) {\n          if (classes.get(r, cc) === c) {\n            classIndices.push([r, cc]);\n          }\n        }\n      }\n      const classIndicesArray = ndarray(new Float32Array(classIndices.flat()), [classIndices.length, 2]);\n      const classReds = ndarray(new Float32Array(classIndices.length), [classIndices.length]);\n      const classGreens = ndarray(new Float32Array(classIndices.length), [classIndices.length]);\n      const classBlues = ndarray(new Float32Array(classIndices.length), [classIndices.length]);\n      \n      ops.muleq(classReds, IMAGE_3D_MATRIX.pick(undefined, undefined, 0), classIndicesArray.pick(undefined, 0));\n      ops.muleq(classGreens, IMAGE_3D_MATRIX.pick(undefined, undefined, 1), classIndicesArray.pick(undefined, 0));\n      ops.muleq(classBlues, IMAGE_3D_MATRIX.pick(undefined, undefined, 2), classIndicesArray.pick(undefined, 0));\n      \n      const sumRed = ops.sum(classReds);\n      const sumGreen = ops.sum(classGreens);\n      const sumBlue = ops.sum(classBlues);\n      \n      centersArray.set(c, 0, sumRed / classIndices.length);\n      centersArray.set(c, 1, sumGreen / classIndices.length);\n      centersArray.set(c, 2, sumBlue / classIndices.length);\n    }\n  }\n\n  // changing values with respect to class centers\n  for (let r = 0; r < IMAGE_3D_MATRIX.shape[0]; r++) {\n    for (let c = 0; c < IMAGE_3D_MATRIX.shape[1]; c++) {\n      const classIndex = classes.get(r, c);\n      IMAGE_3D_MATRIX.set(r, c, 0, centersArray.get(classIndex, 0));\n      IMAGE_3D_MATRIX.set(r, c, 1, centersArray.get(classIndex, 1));\n      IMAGE_3D_MATRIX.set(r, c, 2, centersArray.get(classIndex, 2));\n    }\n  }\n}\n\n\nfunction kmeans_with_click() {\n  const points = [];  \n  console.log(\"Click K times on the image to select points:\");\n  for (let i = 0; i < K; i++) {\n    console.log(`Click point ${i + 1}:`);\n    \n    // simulate getting point from user input\n    const x = getRandomInt(0, IMAGE_3D_MATRIX.shape[0]);\n    const y = getRandomInt(0, IMAGE_3D_MATRIX.shape[1]);\n\n    points.push([x, y]);\n  }\n  \n  kmeans_main(points);\n}\n\n\nfunction kmeans_with_random() {\n  const points = [];\n  for (let i = 0; i < K; i++) {\n    const x = getRandomInt(0, IMAGE_3D_MATRIX.shape[0]);\n    const y = getRandomInt(0, IMAGE_3D_MATRIX.shape[1]);\n    points.push([x, y]);\n  }\n  \n  kmeans_main(points);\n}\n\n\nfunction read_image() {\n  return new Promise((resolve, reject) => {\n    getPixels(PATH_TO_FILE, (err, pixels) => {\n      if (err) reject(err);\n      resolve(pixels);\n    });\n  });\n}\n\n\nfunction handle_arguments() {\n  const args = process.argv.slice(2);\n  if (args.length < 3) {\n    console.error(\"Usage: node color-quantization.js [Image Path] [K value] [Run Mode]\");\n    process.exit(1);\n  }\n\n  PATH_TO_FILE = args[0];\n  K = parseInt(args[1]);\n  RUN_MODE = parseInt(args[2]);\n\n  const allowedKValues = [1, 12, 24];\n  if (!allowedKValues.includes(K)) {\n    console.error(`Only K values of ${allowedKValues} are allowed. Your value is ${K}`);\n    process.exit(1);\n  }\n\n  if (![0, 1].includes(RUN_MODE)) {\n    console.error(\"Program mode should be either 0 or 1\");\n    process.exit(1);\n  }\n}\n\n\nfunction save_image() {\n  const stream = savePixels(IMAGE_3D_MATRIX, 'png').pipe(require('fs').createWriteStream(`output_K${K}.png`));\n  stream.on('finish', () => {\n    console.log(\"Success: Output file generated!\");\n    process.exit(0);\n  });\n}\n\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n\nasync function main() {\n  handle_arguments();\n\n  try {\n    const pixels = await read_image();\n    const shape = [pixels.shape[0], pixels.shape[1], 3];\n    const data = new Float32Array(pixels.shape[0] * pixels.shape[1] * 3);\n    const imageArray = ndarray(data, shape);\n\n    for (let r = 0; r < shape[0]; r++) {\n      for (let c = 0; c < shape[1]; c++) {\n        for (let b = 0; b < shape[2]; b++) {\n          imageArray.set(r, c, b, pixels.get(r, c, b))\n        }\n      }\n    }\n\n    IMAGE_3D_MATRIX = imageArray;\n\n    if (RUN_MODE === 1) {\n      kmeans_with_random();\n    } else {\n      await kmeans_with_click();\n    }\n\n    save_image();\n  } catch (error) {\n    console.error(error);\n    process.exit(1);\n  }\n}\n\nmain();"],"file":"imageProcessor.dev.js"}