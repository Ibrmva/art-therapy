{"version":3,"sources":["server.js"],"names":["dotenv","config","app","corsOptions","origin","methods","allowedHeaders","use","express","json","limit","process","env","VITE_OPENAI_API_KEY","console","error","exit","openai","OpenAI","apiKey","extractDominantColors","imgBuffer","numColors","resize","toFormat","raw","toBuffer","resizedImage","pixels","i","length","r","g","b","push","Error","result","centroids","message","vectorizeImage","vtracer","input","colorPrecision","layerDifference","mode","svg","Buffer","from","flatten","background","pngBuffer","warn","log","Promise","resolve","reject","potrace","trace","color","threshold","err","post","req","res","files","image","status","data","validMimeTypes","includes","mimetype","body","colorOption","processedImage","parseInt","dominantColors","rawImage","segmentedPixels","closestColor","reduce","prev","curr","prevDist","Math","sqrt","pow","currDist","map","round","metadata","width","height","channels","toString","prompt","isNaN","images","generate","model","n","size","response_format","b64_json","next","PORT","listen"],"mappings":"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","sourcesContent":["import express from 'express';\nimport cors from 'cors';\nimport dotenv from 'dotenv';\nimport OpenAI from 'openai';\nimport potrace from 'potrace';\nimport sharp from 'sharp';\nimport { kmeans } from 'ml-kmeans'; \nimport fileUpload from 'express-fileupload'; \nimport vtracer from 'vtracer';\n\ndotenv.config();\n\nconst app = express();\n\nconst corsOptions = {\n    origin: 'http://localhost:5173',\n    methods: ['GET', 'POST'],\n    allowedHeaders: ['Content-Type'],\n};\n\napp.use(cors(corsOptions));\napp.use(express.json({ limit: '50mb' }));\napp.use(fileUpload());\n\n\nif (!process.env.VITE_OPENAI_API_KEY) {\n    console.error('Error: OPENAI_API_KEY is not defined in the .env file');\n    process.exit(1);\n}\n\nconst openai = new OpenAI({\n    apiKey: process.env.VITE_OPENAI_API_KEY,\n});\n\n\n\nconst extractDominantColors = async (imgBuffer, numColors = 24) => {\n    try {\n        const resizedImage = await sharp(imgBuffer)\n            .resize(100, 100)\n            .toFormat('raw')\n            .raw()\n            .toBuffer();\n\n        const pixels = [];\n        for (let i = 0; i < resizedImage.length; i += 3) {\n\n            const r = resizedImage[i];\n            const g = resizedImage[i + 1];\n            const b = resizedImage[i + 2];\n            pixels.push([r, g, b]);\n        }\n\n        if (pixels.length === 0) {\n            throw new Error('No valid pixel data extracted');\n        }\n\n        const result = kmeans(pixels, numColors);\n        return result.centroids;\n    } catch (error) {\n        console.error('Error extracting dominant colors:', error.message);\n        throw new Error('Failed to extract dominant colors');\n    }\n};\n\nconst vectorizeImage = async (imgBuffer) => {\n    try {\n  \n        if (!vtracer) {\n            throw new Error('vtracer is not defined');\n        }\n\n        const svg = await vtracer({\n            input: imgBuffer,\n            colorPrecision: 12,\n            layerDifference: 12,\n            mode: 'spline',\n        });\n\n        const pngBuffer = await sharp(Buffer.from(svg))\n            .toFormat('png')\n            .flatten({ background: { r: 255, g: 255, b: 255 } })\n            .toBuffer();\n        \n        return pngBuffer;\n    } catch (vtracerError) {\n        console.warn('vtracer failed:', vtracerError.message);\n        console.log('Falling back to potrace...');\n\n        return new Promise((resolve, reject) => {\n            potrace.trace(imgBuffer, { color: 'black', threshold: 128 }, async (err, svg) => {\n                if (err) {\n                    console.error('Potrace vectorization failed:', err.message);\n                    reject(new Error('Vectorization failed using both vtracer and potrace'));\n                } else {\n                    try {\n        \n                        const pngBuffer = await sharp(Buffer.from(svg))\n                            .toFormat('png')\n                            .flatten({ background: { r: 255, g: 255, b: 255 } }) // Set background to white\n                            .toBuffer();\n                        \n                        resolve(pngBuffer);\n                    } catch (svgError) {\n                        reject(new Error('Failed to convert SVG to PNG'));\n                    }\n                }\n            });\n        });\n    }\n};\n\n\n\napp.post('/segmentImage', async (req, res) => {\n    try {\n        if (!req.files || !req.files.image) {\n            return res.status(400).json({ error: 'No file uploaded' });\n        }\n\n        const { image } = req.files;\n        const imgBuffer = image.data;\n\n        const validMimeTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/webp', 'image/svg'];\n        if (!validMimeTypes.includes(image.mimetype)) {\n            return res.status(400).json({ error: 'Invalid file type. Only image files are allowed' });\n        }\n\n    \n        const { colorOption = '12' } = req.body;\n        if (!['vector', '12', '24', 'none'].includes(colorOption)) {\n            return res.status(400).json({ error: 'Invalid color option. Allowed values are \"vector\", \"12\", \"24\", \"none\".' });\n        }\n        \n    \n        const pngBuffer = await sharp(imgBuffer).toFormat('png').toBuffer();\n        \n        let processedImage;\n        if (colorOption === 'vector') {\n       \n            const svg = await vectorizeImage(pngBuffer);\n            processedImage = Buffer.from(svg); \n        } else if (colorOption === 'none') {\n  \n            processedImage = pngBuffer;\n        } else {\n            \n            const numColors = parseInt(colorOption, 10);\n        \n            if (numColors === 12 || numColors === 24) {\n\n                const dominantColors = await extractDominantColors(pngBuffer, numColors);\n                const rawImage = await sharp(pngBuffer).raw().toBuffer();\n                const segmentedPixels = [];\n        \n                for (let i = 0; i < rawImage.length; i += 3) {\n                    const [r, g, b] = [rawImage[i], rawImage[i + 1], rawImage[i + 2]];\n        \n                    const closestColor = dominantColors.reduce((prev, curr) => {\n                        const prevDist = Math.sqrt(Math.pow(prev[0] - r, 2) + Math.pow(prev[1] - g, 2) + Math.pow(prev[2] - b, 2));\n                        const currDist = Math.sqrt(Math.pow(curr[0] - r, 2) + Math.pow(curr[1] - g, 2) + Math.pow(curr[2] - b, 2));\n                        return prevDist < currDist ? prev : curr;\n                    });\n        \n                    segmentedPixels.push(...closestColor.map(Math.round));\n                }\n        \n                const { width, height } = await sharp(pngBuffer).metadata();\n                \n                processedImage = await sharp(Buffer.from(segmentedPixels), { raw: { width, height, channels: 3 } })\n                    .toFormat('png')\n                    .toBuffer();\n            }\n        }\n        \n        res.status(200).json({ image: processedImage.toString('base64') });\n    } catch (error) {\n        console.error('Error segmenting image:', error.message);\n        res.status(500).json({ error: 'Failed to segment image', message: error.message });\n    }\n});\n\n\n\napp.post('/generateImage', async (req, res) => {\n    const { prompt, height, width } = req.body;\n\n    if (!prompt || typeof prompt !== 'string') {\n        return res.status(400).json({ error: \"Invalid or missing 'prompt' in request body\" });\n    }\n\n    if (!height || isNaN(height) || height <= 0) {\n        return res.status(400).json({ error: \"Invalid 'height' in request body\" });\n    }\n\n    if (!width || isNaN(width) || width <= 0) {\n        return res.status(400).json({ error: \"Invalid 'width' in request body\" });\n    }\n\n    try {\n        const image = await openai.images.generate({\n            prompt,\n            model: 'dall-e-3',\n            n: 1,\n            size: `${width}x${height}`,\n            response_format: 'b64_json',\n        });\n\n        res.status(200).json({ image: image.data[0].b64_json });\n    } catch (error) {\n        console.error('Error generating image:', error.message);\n        res.status(500).json({ error: 'Failed to generate image', message: error.message });\n    }\n});\n\napp.use((err, req, res, next) => {\n    console.error('Internal server error:', err);\n    res.status(500).json({ error: 'Internal server error', message: err.message });\n});\n\nconst PORT = process.env.PORT || 4000;\napp.listen(PORT, () => {\n    console.log(`Server is running on http://localhost:${PORT}`);\n});\n"],"file":"server.dev.js"}