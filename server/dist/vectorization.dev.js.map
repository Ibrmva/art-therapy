{"version":3,"sources":["vectorization.js"],"names":["router","express","Router","saveBase64Image","base64","filename","base64Data","replace","buffer","Buffer","from","fs","writeFileSync","removeFile","filepath","existsSync","unlinkSync","post","req","res","body","image","maxColors","status","json","error","rasterFilePath","path","join","__dirname","vectorFilePath","command","stdout","stderr","console","message","warn","vectorImage","readFileSync","log"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,MAAM,GAAGC,oBAAQC,MAAR,EAAf,C,CAEA;;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD,EAASC,QAAT,EAAsB;AAC1C,MAAMC,UAAU,GAAGF,MAAM,CAACG,OAAP,CAAe,0BAAf,EAA2C,EAA3C,CAAnB;AACA,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYJ,UAAZ,EAAwB,QAAxB,CAAf;;AACAK,iBAAGC,aAAH,CAAiBP,QAAjB,EAA2BG,MAA3B;AACH,CAJD,C,CAMA;;;AACA,IAAMK,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAc;AAC7B,MAAIH,eAAGI,UAAH,CAAcD,QAAd,CAAJ,EAA6B;AACzBH,mBAAGK,UAAH,CAAcF,QAAd;AACH;AACJ,CAJD;;AAMAd,MAAM,CAACiB,IAAP,CAAY,wBAAZ,EAAsC,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEID,GAAG,CAACE,IAFR,EAEtBC,KAFsB,aAEtBA,KAFsB,kCAEfC,SAFe,EAEfA,SAFe,oCAEH,EAFG;;AAAA,gBAI1B,CAACD,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAJD;AAAA;AAAA;AAAA;;AAAA,2CAKnBF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAArB,CALmB;;AAAA;AAQxBC,UAAAA,cARwB,GAQPC,iBAAKC,IAAL,CAAUC,SAAV,EAAqB,MAArB,EAA6B,WAA7B,CARO;AASxBC,UAAAA,cATwB,GASPH,iBAAKC,IAAL,CAAUC,SAAV,EAAqB,MAArB,EAA6B,YAA7B,CATO,EAW9B;;AACA1B,UAAAA,eAAe,CAACkB,KAAD,EAAQK,cAAR,CAAf,CAZ8B,CAc9B;AACA;;AACMK,UAAAA,OAhBwB,4GAgBkFL,cAhBlF,iBAgBuGI,cAhBvG;AAkB9B,mCAAKC,OAAL,EAAc,UAACN,KAAD,EAAQO,MAAR,EAAgBC,MAAhB,EAA2B;AACrC,gBAAIR,KAAJ,EAAW;AACPS,cAAAA,OAAO,CAACT,KAAR,CAAc,6BAAd,EAA6CA,KAAK,CAACU,OAAnD;AACAtB,cAAAA,UAAU,CAACa,cAAD,CAAV;AACA,qBAAOP,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,gBAAAA,KAAK,EAAE,sBAAT;AAAiCU,gBAAAA,OAAO,EAAEV,KAAK,CAACU;AAAhD,eAArB,CAAP;AACH;;AAED,gBAAIF,MAAJ,EAAYC,OAAO,CAACE,IAAR,CAAa,uBAAb,EAAsCH,MAAtC,EAPyB,CASrC;;AACA,gBAAMI,WAAW,GAAG1B,eAAG2B,YAAH,CAAgBR,cAAhB,EAAgC,OAAhC,CAApB,CAVqC,CAYrC;;;AACAjB,YAAAA,UAAU,CAACa,cAAD,CAAV;AACAb,YAAAA,UAAU,CAACiB,cAAD,CAAV;AAEAI,YAAAA,OAAO,CAACK,GAAR,CAAY,sCAAZ;AACApB,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEa,cAAAA,WAAW,EAAXA;AAAF,aAArB;AACH,WAlBD;AAlB8B;AAAA;;AAAA;AAAA;AAAA;AAsC9BH,UAAAA,OAAO,CAACT,KAAR,CAAc,wCAAd,EAAwD,YAAMU,OAA9D;AACAhB,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,KAAK,EAAE,yBAAT;AAAoCU,YAAAA,OAAO,EAAE,YAAMA;AAAnD,WAArB;;AAvC8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtC;eA2CenC,M","sourcesContent":["import express from 'express';\nimport { exec } from 'child_process';\nimport path from 'path';\nimport fs from 'fs';\n\nconst router = express.Router();\n\n// Utility function to save base64 image to a file\nconst saveBase64Image = (base64, filename) => {\n    const base64Data = base64.replace(/^data:image\\/\\w+;base64,/, '');\n    const buffer = Buffer.from(base64Data, 'base64');\n    fs.writeFileSync(filename, buffer);\n};\n\n// Utility function to remove a file\nconst removeFile = (filepath) => {\n    if (fs.existsSync(filepath)) {\n        fs.unlinkSync(filepath);\n    }\n};\n\nrouter.post('/convertRasterToVector', async (req, res) => {\n    try {\n        const { image, maxColors = 24 } = req.body;\n\n        if (!image || typeof image !== 'string') {\n            return res.status(400).json({ error: \"Invalid or missing 'image' in request body\" });\n        }\n\n        const rasterFilePath = path.join(__dirname, 'temp', 'input.png');\n        const vectorFilePath = path.join(__dirname, 'temp', 'output.svg');\n\n        // Save the raster image to a file\n        saveBase64Image(image, rasterFilePath);\n\n        // Run a command-line tool for vectorization (e.g., Potrace or similar)\n        // Ensure the tool is installed on the server.\n        const command = `potrace --svg --color=\"#000000\" --turdsize=0 --progress -u 1 -a 1 --alphamax=1 -k 0.4 --flat ${rasterFilePath} -o ${vectorFilePath}`;\n\n        exec(command, (error, stdout, stderr) => {\n            if (error) {\n                console.error('Error during vectorization:', error.message);\n                removeFile(rasterFilePath);\n                return res.status(500).json({ error: 'Vectorization failed', message: error.message });\n            }\n\n            if (stderr) console.warn('Vectorization stderr:', stderr);\n\n            // Read the generated SVG file\n            const vectorImage = fs.readFileSync(vectorFilePath, 'utf-8');\n\n            // Clean up temporary files\n            removeFile(rasterFilePath);\n            removeFile(vectorFilePath);\n\n            console.log('Vectorization completed successfully');\n            res.status(200).json({ vectorImage });\n        });\n    } catch (error) {\n        console.error('Error in /convertRasterToVector route:', error.message);\n        res.status(500).json({ error: 'Failed to process image', message: error.message });\n    }\n});\n\nexport default router;\n"],"file":"vectorization.dev.js"}