{"version":3,"sources":["vectorization.js"],"names":["_express","_interopRequireDefault","require","_child_process","_path","_fs","router","express","Router","saveBase64Image","base64","filename","base64Data","replace","buffer","Buffer","from","fs","writeFileSync","removeFile","filepath","existsSync","unlinkSync","req","res","_req$body","image","_req$body$maxColors","rasterFilePath","vectorFilePath","command","regeneratorRuntime","async","_context","prev","next","body","maxColors","abrupt","status","json","error","path","__dirname","concat","exec","stdout","stderr","console","message","warn","vectorImage","readFileSync","t0","stop"],"mappings":"2FAAA,IAAAA,SAAAC,uBAAAC,QAAA,YACAC,eAAAD,QAAA,iBACAE,MAAAH,uBAAAC,QAAA,SACAG,IAAAJ,uBAAAC,QAAA,+EAEA,IAAMI,OAASC,SAAAA,QAAQC,SAGjBC,gBAAkB,SAACC,EAAQC,GAPjC,IAAAC,EAAAF,EAAAG,QAAA,2BAAA,IASUC,EAASC,OAAOC,KAAKJ,EAAY,UAR3CK,IAAAA,QAAAC,cAAAP,EAAAG,IAaMK,WAAa,SAACC,GACZH,IAAAA,QAAGI,WAAWD,IAXhBd,IAAAA,QAAMgB,WAAGf,IAIXD,OAAMM,KAAAA,yBAA4B,SAAAW,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAAF,EAAAC,KAAA,EAAAT,EAcIF,EAAIa,KAA9BV,EAdsBD,EActBC,MAdsBC,EAAAF,EAcfY,eAde,IAAAV,EAcH,GAdGA,EAKtCD,GAAA,iBAAAA,EALsC,CAAAO,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAK,OAAA,SAiBnBd,EAAIe,OAAO,KAAKC,KAAK,CAAEC,MAAO,gDAjBX,KAAA,EAO9BxB,EAAAyB,MAAAA,QAActB,KAAlBuB,UAA6B,OAAA,aACzB1B,EAAcG,MAAAA,QAAAA,KAAduB,UAAA,OAAA,cAgBAlC,gBAAgBiB,EAAOE,GAZOE,EAZA,gGAAAc,OAYAhB,EAZA,QAAAgB,OAYAf,IAAA,EAAA1B,eAAA0C,MAAAf,EAAA,SAAAW,EAAAK,EAAAC,GAAA,GAAAN,EAsBtB,OAtBsBO,QAAAP,MAAA,8BAAAA,EAAAQ,SAAA9B,WAEQiB,GAoBvBZ,EAAIe,OAAO,KAAKC,KAAK,CAAEC,MAAO,uBAAwBQ,QAASR,EAAMQ,UAtBtDF,GAAAC,QAAAE,KAAA,wBAAAH,GAAA,IAAAI,EAAAlC,IAAAA,QAAAmC,aAKfb,EAAiB,SA0B5BpB,WAAWS,GA/BeT,WAAAU,GASxBA,QAAAA,IATwB,wCAmC1BL,EAAIe,OAAO,KAAKC,KAAK,CAAEW,YAAAA,MA/CGlB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAoB,GAAApB,EAAA,MAAA,GAkD9Be,QAAQP,MAAM,yCAA0CR,EAAAoB,GAAMJ,SAtBxDnB,EAAAA,OAhBwB,KAAAU,KAAA,CAAAC,MAAA,0BAAAQ,QAAAhB,EAAAoB,GAAAJ,UAZA,KAAA,GAAA,IAAA,MAAA,OAAAhB,EAAAqB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,qBAiCtBnC","file":"vectorization.min.js","sourcesContent":["import express from 'express';\nimport { exec } from 'child_process';\nimport path from 'path';\nimport fs from 'fs';\n\nconst router = express.Router();\n\n// Utility function to save base64 image to a file\nconst saveBase64Image = (base64, filename) => {\n    const base64Data = base64.replace(/^data:image\\/\\w+;base64,/, '');\n    const buffer = Buffer.from(base64Data, 'base64');\n    fs.writeFileSync(filename, buffer);\n};\n\n// Utility function to remove a file\nconst removeFile = (filepath) => {\n    if (fs.existsSync(filepath)) {\n        fs.unlinkSync(filepath);\n    }\n};\n\nrouter.post('/convertRasterToVector', async (req, res) => {\n    try {\n        const { image, maxColors = 24 } = req.body;\n\n        if (!image || typeof image !== 'string') {\n            return res.status(400).json({ error: \"Invalid or missing 'image' in request body\" });\n        }\n\n        const rasterFilePath = path.join(__dirname, 'temp', 'input.png');\n        const vectorFilePath = path.join(__dirname, 'temp', 'output.svg');\n\n        // Save the raster image to a file\n        saveBase64Image(image, rasterFilePath);\n\n        // Run a command-line tool for vectorization (e.g., Potrace or similar)\n        // Ensure the tool is installed on the server.\n        const command = `potrace --svg --color=\"#000000\" --turdsize=0 --progress -u 1 -a 1 --alphamax=1 -k 0.4 --flat ${rasterFilePath} -o ${vectorFilePath}`;\n\n        exec(command, (error, stdout, stderr) => {\n            if (error) {\n                console.error('Error during vectorization:', error.message);\n                removeFile(rasterFilePath);\n                return res.status(500).json({ error: 'Vectorization failed', message: error.message });\n            }\n\n            if (stderr) console.warn('Vectorization stderr:', stderr);\n\n            // Read the generated SVG file\n            const vectorImage = fs.readFileSync(vectorFilePath, 'utf-8');\n\n            // Clean up temporary files\n            removeFile(rasterFilePath);\n            removeFile(vectorFilePath);\n\n            console.log('Vectorization completed successfully');\n            res.status(200).json({ vectorImage });\n        });\n    } catch (error) {\n        console.error('Error in /convertRasterToVector route:', error.message);\n        res.status(500).json({ error: 'Failed to process image', message: error.message });\n    }\n});\n\nexport default router;\n"]}